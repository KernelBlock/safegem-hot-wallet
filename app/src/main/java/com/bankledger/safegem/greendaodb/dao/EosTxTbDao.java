package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.EosTxTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "eos_tx".
*/
public class EosTxTbDao extends AbstractDao<EosTxTb, Void> {

    public static final String TABLENAME = "eos_tx";

    /**
     * Properties of entity EosTxTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TxId = new Property(0, String.class, "txId", false, "tx_id");
        public final static Property Account = new Property(1, String.class, "account", false, "account");
        public final static Property Time = new Property(2, String.class, "time", false, "time");
        public final static Property Height = new Property(3, String.class, "height", false, "height");
        public final static Property Coin = new Property(4, String.class, "coin", false, "coin");
        public final static Property Amount = new Property(5, String.class, "amount", false, "amount");
        public final static Property From = new Property(6, String.class, "from", false, "from");
        public final static Property To = new Property(7, String.class, "to", false, "to");
        public final static Property Memo = new Property(8, String.class, "memo", false, "memo");
        public final static Property Type = new Property(9, int.class, "type", false, "type");
    }


    public EosTxTbDao(DaoConfig config) {
        super(config);
    }
    
    public EosTxTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"eos_tx\" (" + //
                "\"tx_id\" TEXT," + // 0: txId
                "\"account\" TEXT," + // 1: account
                "\"time\" TEXT," + // 2: time
                "\"height\" TEXT," + // 3: height
                "\"coin\" TEXT," + // 4: coin
                "\"amount\" TEXT," + // 5: amount
                "\"from\" TEXT," + // 6: from
                "\"to\" TEXT," + // 7: to
                "\"memo\" TEXT," + // 8: memo
                "\"type\" INTEGER NOT NULL );"); // 9: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_eos_tx_tx_id_DESC ON \"eos_tx\"" +
                " (\"tx_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"eos_tx\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EosTxTb entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(5, coin);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EosTxTb entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(4, height);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(5, coin);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
        stmt.bindLong(10, entity.getType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EosTxTb readEntity(Cursor cursor, int offset) {
        EosTxTb entity = new EosTxTb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // txId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coin
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // to
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memo
            cursor.getInt(offset + 9) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EosTxTb entity, int offset) {
        entity.setTxId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoin(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EosTxTb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EosTxTb entity) {
        return null;
    }

    @Override
    public boolean hasKey(EosTxTb entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
