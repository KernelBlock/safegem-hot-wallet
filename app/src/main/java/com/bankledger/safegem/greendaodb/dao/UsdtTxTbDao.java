package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.UsdtTxTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "usdt_tx".
*/
public class UsdtTxTbDao extends AbstractDao<UsdtTxTb, Void> {

    public static final String TABLENAME = "usdt_tx";

    /**
     * Properties of entity UsdtTxTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cold_unique_id = new Property(0, String.class, "cold_unique_id", false, "cold_unique_id");
        public final static Property Version = new Property(1, String.class, "version", false, "version");
        public final static Property Txid = new Property(2, String.class, "txid", false, "txid");
        public final static Property Amount = new Property(3, String.class, "amount", false, "amount");
        public final static Property Referenceaddress = new Property(4, String.class, "referenceaddress", false, "referenceaddress");
        public final static Property Sendingaddress = new Property(5, String.class, "sendingaddress", false, "sendingaddress");
        public final static Property Fee = new Property(6, String.class, "fee", false, "fee");
        public final static Property Blocktime = new Property(7, Long.class, "blocktime", false, "blocktime");
        public final static Property Confirmations = new Property(8, String.class, "confirmations", false, "confirmations");
        public final static Property Blockhash = new Property(9, String.class, "blockhash", false, "blockhash");
        public final static Property Positioninblock = new Property(10, String.class, "positioninblock", false, "positioninblock");
        public final static Property Block = new Property(11, String.class, "block", false, "block");
        public final static Property Propertyid = new Property(12, String.class, "propertyid", false, "propertyid");
    }


    public UsdtTxTbDao(DaoConfig config) {
        super(config);
    }
    
    public UsdtTxTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"usdt_tx\" (" + //
                "\"cold_unique_id\" TEXT," + // 0: cold_unique_id
                "\"version\" TEXT," + // 1: version
                "\"txid\" TEXT," + // 2: txid
                "\"amount\" TEXT," + // 3: amount
                "\"referenceaddress\" TEXT," + // 4: referenceaddress
                "\"sendingaddress\" TEXT," + // 5: sendingaddress
                "\"fee\" TEXT," + // 6: fee
                "\"blocktime\" INTEGER," + // 7: blocktime
                "\"confirmations\" TEXT," + // 8: confirmations
                "\"blockhash\" TEXT," + // 9: blockhash
                "\"positioninblock\" TEXT," + // 10: positioninblock
                "\"block\" TEXT," + // 11: block
                "\"propertyid\" TEXT);"); // 12: propertyid
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_usdt_tx_txid_DESC ON \"usdt_tx\"" +
                " (\"txid\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"usdt_tx\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsdtTxTb entity) {
        stmt.clearBindings();
 
        String cold_unique_id = entity.getCold_unique_id();
        if (cold_unique_id != null) {
            stmt.bindString(1, cold_unique_id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(3, txid);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String referenceaddress = entity.getReferenceaddress();
        if (referenceaddress != null) {
            stmt.bindString(5, referenceaddress);
        }
 
        String sendingaddress = entity.getSendingaddress();
        if (sendingaddress != null) {
            stmt.bindString(6, sendingaddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(7, fee);
        }
 
        Long blocktime = entity.getBlocktime();
        if (blocktime != null) {
            stmt.bindLong(8, blocktime);
        }
 
        String confirmations = entity.getConfirmations();
        if (confirmations != null) {
            stmt.bindString(9, confirmations);
        }
 
        String blockhash = entity.getBlockhash();
        if (blockhash != null) {
            stmt.bindString(10, blockhash);
        }
 
        String positioninblock = entity.getPositioninblock();
        if (positioninblock != null) {
            stmt.bindString(11, positioninblock);
        }
 
        String block = entity.getBlock();
        if (block != null) {
            stmt.bindString(12, block);
        }
 
        String propertyid = entity.getPropertyid();
        if (propertyid != null) {
            stmt.bindString(13, propertyid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsdtTxTb entity) {
        stmt.clearBindings();
 
        String cold_unique_id = entity.getCold_unique_id();
        if (cold_unique_id != null) {
            stmt.bindString(1, cold_unique_id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(3, txid);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String referenceaddress = entity.getReferenceaddress();
        if (referenceaddress != null) {
            stmt.bindString(5, referenceaddress);
        }
 
        String sendingaddress = entity.getSendingaddress();
        if (sendingaddress != null) {
            stmt.bindString(6, sendingaddress);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(7, fee);
        }
 
        Long blocktime = entity.getBlocktime();
        if (blocktime != null) {
            stmt.bindLong(8, blocktime);
        }
 
        String confirmations = entity.getConfirmations();
        if (confirmations != null) {
            stmt.bindString(9, confirmations);
        }
 
        String blockhash = entity.getBlockhash();
        if (blockhash != null) {
            stmt.bindString(10, blockhash);
        }
 
        String positioninblock = entity.getPositioninblock();
        if (positioninblock != null) {
            stmt.bindString(11, positioninblock);
        }
 
        String block = entity.getBlock();
        if (block != null) {
            stmt.bindString(12, block);
        }
 
        String propertyid = entity.getPropertyid();
        if (propertyid != null) {
            stmt.bindString(13, propertyid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UsdtTxTb readEntity(Cursor cursor, int offset) {
        UsdtTxTb entity = new UsdtTxTb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cold_unique_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // version
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // txid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // referenceaddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sendingaddress
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fee
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // blocktime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // confirmations
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // blockhash
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // positioninblock
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // block
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // propertyid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsdtTxTb entity, int offset) {
        entity.setCold_unique_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTxid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReferenceaddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendingaddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFee(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBlocktime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setConfirmations(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBlockhash(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPositioninblock(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBlock(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPropertyid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UsdtTxTb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UsdtTxTb entity) {
        return null;
    }

    @Override
    public boolean hasKey(UsdtTxTb entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
