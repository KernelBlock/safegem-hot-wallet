package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.EthTokenTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "eth_token".
*/
public class EthTokenTbDao extends AbstractDao<EthTokenTb, Void> {

    public static final String TABLENAME = "eth_token";

    /**
     * Properties of entity EthTokenTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Address = new Property(0, String.class, "address", false, "address");
        public final static Property ContractAddress = new Property(1, String.class, "contractAddress", false, "contract_address");
        public final static Property Balance = new Property(2, String.class, "balance", false, "balance");
        public final static Property TransactionCount = new Property(3, String.class, "transactionCount", false, "transaction_count");
    }


    public EthTokenTbDao(DaoConfig config) {
        super(config);
    }
    
    public EthTokenTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"eth_token\" (" + //
                "\"address\" TEXT," + // 0: address
                "\"contract_address\" TEXT," + // 1: contractAddress
                "\"balance\" TEXT," + // 2: balance
                "\"transaction_count\" TEXT);"); // 3: transactionCount
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_eth_token_address_DESC_contract_address_DESC ON \"eth_token\"" +
                " (\"address\" DESC,\"contract_address\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"eth_token\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EthTokenTb entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(3, balance);
        }
 
        String transactionCount = entity.getTransactionCount();
        if (transactionCount != null) {
            stmt.bindString(4, transactionCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EthTokenTb entity) {
        stmt.clearBindings();
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(1, address);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(3, balance);
        }
 
        String transactionCount = entity.getTransactionCount();
        if (transactionCount != null) {
            stmt.bindString(4, transactionCount);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EthTokenTb readEntity(Cursor cursor, int offset) {
        EthTokenTb entity = new EthTokenTb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // address
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contractAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // balance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // transactionCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EthTokenTb entity, int offset) {
        entity.setAddress(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContractAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBalance(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTransactionCount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EthTokenTb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EthTokenTb entity) {
        return null;
    }

    @Override
    public boolean hasKey(EthTokenTb entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
