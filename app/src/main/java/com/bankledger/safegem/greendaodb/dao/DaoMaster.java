package com.bankledger.safegem.greendaodb.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 8): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 8;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        UserTbDao.createTable(db, ifNotExists);
        AddressBookTbDao.createTable(db, ifNotExists);
        UsdtTxTbDao.createTable(db, ifNotExists);
        MessageTbDao.createTable(db, ifNotExists);
        EosAccountTbDao.createTable(db, ifNotExists);
        EosBalanceTbDao.createTable(db, ifNotExists);
        EosRamTbDao.createTable(db, ifNotExists);
        EosDelegateTbDao.createTable(db, ifNotExists);
        TxOutsTbDao.createTable(db, ifNotExists);
        EthTokenTbDao.createTable(db, ifNotExists);
        TxInsTbDao.createTable(db, ifNotExists);
        ColdWalletTbDao.createTable(db, ifNotExists);
        MonitorAddressTbDao.createTable(db, ifNotExists);
        TxTbDao.createTable(db, ifNotExists);
        SafeAssetTbDao.createTable(db, ifNotExists);
        EosTxTbDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        UserTbDao.dropTable(db, ifExists);
        AddressBookTbDao.dropTable(db, ifExists);
        UsdtTxTbDao.dropTable(db, ifExists);
        MessageTbDao.dropTable(db, ifExists);
        EosAccountTbDao.dropTable(db, ifExists);
        EosBalanceTbDao.dropTable(db, ifExists);
        EosRamTbDao.dropTable(db, ifExists);
        EosDelegateTbDao.dropTable(db, ifExists);
        TxOutsTbDao.dropTable(db, ifExists);
        EthTokenTbDao.dropTable(db, ifExists);
        TxInsTbDao.dropTable(db, ifExists);
        ColdWalletTbDao.dropTable(db, ifExists);
        MonitorAddressTbDao.dropTable(db, ifExists);
        TxTbDao.dropTable(db, ifExists);
        SafeAssetTbDao.dropTable(db, ifExists);
        EosTxTbDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(UserTbDao.class);
        registerDaoClass(AddressBookTbDao.class);
        registerDaoClass(UsdtTxTbDao.class);
        registerDaoClass(MessageTbDao.class);
        registerDaoClass(EosAccountTbDao.class);
        registerDaoClass(EosBalanceTbDao.class);
        registerDaoClass(EosRamTbDao.class);
        registerDaoClass(EosDelegateTbDao.class);
        registerDaoClass(TxOutsTbDao.class);
        registerDaoClass(EthTokenTbDao.class);
        registerDaoClass(TxInsTbDao.class);
        registerDaoClass(ColdWalletTbDao.class);
        registerDaoClass(MonitorAddressTbDao.class);
        registerDaoClass(TxTbDao.class);
        registerDaoClass(SafeAssetTbDao.class);
        registerDaoClass(EosTxTbDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
