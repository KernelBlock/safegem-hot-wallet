package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.MonitorAddressTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "monitor_address".
*/
public class MonitorAddressTbDao extends AbstractDao<MonitorAddressTb, Long> {

    public static final String TABLENAME = "monitor_address";

    /**
     * Properties of entity MonitorAddressTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "user_id");
        public final static Property ColdUniqueId = new Property(2, String.class, "coldUniqueId", false, "cold_unique_id");
        public final static Property Coin = new Property(3, String.class, "coin", false, "coin");
        public final static Property Address = new Property(4, String.class, "address", false, "address");
        public final static Property TempFlag = new Property(5, Integer.class, "tempFlag", false, "temp_flag");
        public final static Property ContractAddress = new Property(6, String.class, "contractAddress", false, "contract_address");
        public final static Property CoinType = new Property(7, Integer.class, "coinType", false, "coin_type");
        public final static Property Symbol = new Property(8, String.class, "symbol", false, "symbol");
        public final static Property Decimals = new Property(9, String.class, "decimals", false, "decimals");
        public final static Property TotalSupply = new Property(10, String.class, "totalSupply", false, "total_supply");
        public final static Property CoinImg = new Property(11, String.class, "coinImg", false, "coin_img");
    }


    public MonitorAddressTbDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorAddressTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"monitor_address\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" INTEGER," + // 1: userId
                "\"cold_unique_id\" TEXT," + // 2: coldUniqueId
                "\"coin\" TEXT," + // 3: coin
                "\"address\" TEXT," + // 4: address
                "\"temp_flag\" INTEGER," + // 5: tempFlag
                "\"contract_address\" TEXT," + // 6: contractAddress
                "\"coin_type\" INTEGER," + // 7: coinType
                "\"symbol\" TEXT," + // 8: symbol
                "\"decimals\" TEXT," + // 9: decimals
                "\"total_supply\" TEXT," + // 10: totalSupply
                "\"coin_img\" TEXT);"); // 11: coinImg
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_monitor_address_user_id_DESC_cold_unique_id_DESC_address_DESC_coin_type_DESC_contract_address_DESC ON \"monitor_address\"" +
                " (\"user_id\" DESC,\"cold_unique_id\" DESC,\"address\" DESC,\"coin_type\" DESC,\"contract_address\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"monitor_address\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorAddressTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String coldUniqueId = entity.getColdUniqueId();
        if (coldUniqueId != null) {
            stmt.bindString(3, coldUniqueId);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(4, coin);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Integer tempFlag = entity.getTempFlag();
        if (tempFlag != null) {
            stmt.bindLong(6, tempFlag);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(7, contractAddress);
        }
 
        Integer coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindLong(8, coinType);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(9, symbol);
        }
 
        String decimals = entity.getDecimals();
        if (decimals != null) {
            stmt.bindString(10, decimals);
        }
 
        String totalSupply = entity.getTotalSupply();
        if (totalSupply != null) {
            stmt.bindString(11, totalSupply);
        }
 
        String coinImg = entity.getCoinImg();
        if (coinImg != null) {
            stmt.bindString(12, coinImg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorAddressTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String coldUniqueId = entity.getColdUniqueId();
        if (coldUniqueId != null) {
            stmt.bindString(3, coldUniqueId);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(4, coin);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Integer tempFlag = entity.getTempFlag();
        if (tempFlag != null) {
            stmt.bindLong(6, tempFlag);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(7, contractAddress);
        }
 
        Integer coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindLong(8, coinType);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(9, symbol);
        }
 
        String decimals = entity.getDecimals();
        if (decimals != null) {
            stmt.bindString(10, decimals);
        }
 
        String totalSupply = entity.getTotalSupply();
        if (totalSupply != null) {
            stmt.bindString(11, totalSupply);
        }
 
        String coinImg = entity.getCoinImg();
        if (coinImg != null) {
            stmt.bindString(12, coinImg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorAddressTb readEntity(Cursor cursor, int offset) {
        MonitorAddressTb entity = new MonitorAddressTb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coldUniqueId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // tempFlag
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contractAddress
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // coinType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // symbol
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // decimals
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // totalSupply
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // coinImg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorAddressTb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setColdUniqueId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTempFlag(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setContractAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoinType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSymbol(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDecimals(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTotalSupply(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCoinImg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorAddressTb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorAddressTb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorAddressTb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
