package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.UserTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user_tb".
*/
public class UserTbDao extends AbstractDao<UserTb, Long> {

    public static final String TABLENAME = "user_tb";

    /**
     * Properties of entity UserTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "user_id");
        public final static Property TokenId = new Property(2, String.class, "tokenId", false, "token_id");
        public final static Property IncrementId = new Property(3, Long.class, "incrementId", false, "increment_id");
        public final static Property Phone = new Property(4, String.class, "phone", false, "phone");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "nick_name");
        public final static Property PicUrl = new Property(6, String.class, "picUrl", false, "pic_url");
        public final static Property IsLogin = new Property(7, Boolean.class, "isLogin", false, "is_login");
    }


    public UserTbDao(DaoConfig config) {
        super(config);
    }
    
    public UserTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"user_id\" INTEGER UNIQUE ," + // 1: userId
                "\"token_id\" TEXT," + // 2: tokenId
                "\"increment_id\" INTEGER," + // 3: incrementId
                "\"phone\" TEXT," + // 4: phone
                "\"nick_name\" TEXT," + // 5: nickName
                "\"pic_url\" TEXT," + // 6: picUrl
                "\"is_login\" INTEGER);"); // 7: isLogin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String tokenId = entity.getTokenId();
        if (tokenId != null) {
            stmt.bindString(3, tokenId);
        }
 
        Long incrementId = entity.getIncrementId();
        if (incrementId != null) {
            stmt.bindLong(4, incrementId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(7, picUrl);
        }
 
        Boolean isLogin = entity.getIsLogin();
        if (isLogin != null) {
            stmt.bindLong(8, isLogin ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String tokenId = entity.getTokenId();
        if (tokenId != null) {
            stmt.bindString(3, tokenId);
        }
 
        Long incrementId = entity.getIncrementId();
        if (incrementId != null) {
            stmt.bindLong(4, incrementId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(7, picUrl);
        }
 
        Boolean isLogin = entity.getIsLogin();
        if (isLogin != null) {
            stmt.bindLong(8, isLogin ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTb readEntity(Cursor cursor, int offset) {
        UserTb entity = new UserTb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tokenId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // incrementId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picUrl
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isLogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTokenId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIncrementId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLogin(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
