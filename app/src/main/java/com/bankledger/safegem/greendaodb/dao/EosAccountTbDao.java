package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.EosAccountTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "eos_account_tb".
*/
public class EosAccountTbDao extends AbstractDao<EosAccountTb, Void> {

    public static final String TABLENAME = "eos_account_tb";

    /**
     * Properties of entity EosAccountTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ColdUniqueId = new Property(0, String.class, "coldUniqueId", false, "cold_unique_id");
        public final static Property Account = new Property(1, String.class, "account", false, "account");
        public final static Property OwnerPubKey = new Property(2, String.class, "ownerPubKey", false, "owner_pub_key");
        public final static Property ActivePubKey = new Property(3, String.class, "activePubKey", false, "active_pub_key");
    }


    public EosAccountTbDao(DaoConfig config) {
        super(config);
    }
    
    public EosAccountTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"eos_account_tb\" (" + //
                "\"cold_unique_id\" TEXT," + // 0: coldUniqueId
                "\"account\" TEXT," + // 1: account
                "\"owner_pub_key\" TEXT," + // 2: ownerPubKey
                "\"active_pub_key\" TEXT);"); // 3: activePubKey
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_eos_account_tb_cold_unique_id_DESC ON \"eos_account_tb\"" +
                " (\"cold_unique_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"eos_account_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EosAccountTb entity) {
        stmt.clearBindings();
 
        String coldUniqueId = entity.getColdUniqueId();
        if (coldUniqueId != null) {
            stmt.bindString(1, coldUniqueId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String ownerPubKey = entity.getOwnerPubKey();
        if (ownerPubKey != null) {
            stmt.bindString(3, ownerPubKey);
        }
 
        String activePubKey = entity.getActivePubKey();
        if (activePubKey != null) {
            stmt.bindString(4, activePubKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EosAccountTb entity) {
        stmt.clearBindings();
 
        String coldUniqueId = entity.getColdUniqueId();
        if (coldUniqueId != null) {
            stmt.bindString(1, coldUniqueId);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String ownerPubKey = entity.getOwnerPubKey();
        if (ownerPubKey != null) {
            stmt.bindString(3, ownerPubKey);
        }
 
        String activePubKey = entity.getActivePubKey();
        if (activePubKey != null) {
            stmt.bindString(4, activePubKey);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EosAccountTb readEntity(Cursor cursor, int offset) {
        EosAccountTb entity = new EosAccountTb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // coldUniqueId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ownerPubKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // activePubKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EosAccountTb entity, int offset) {
        entity.setColdUniqueId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOwnerPubKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setActivePubKey(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EosAccountTb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EosAccountTb entity) {
        return null;
    }

    @Override
    public boolean hasKey(EosAccountTb entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
