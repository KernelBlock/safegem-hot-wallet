package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.EosDelegateTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "eos_delegate".
*/
public class EosDelegateTbDao extends AbstractDao<EosDelegateTb, Void> {

    public static final String TABLENAME = "eos_delegate";

    /**
     * Properties of entity EosDelegateTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TxId = new Property(0, String.class, "txId", false, "tx_id");
        public final static Property From = new Property(1, String.class, "from", false, "from");
        public final static Property Receiver = new Property(2, String.class, "receiver", false, "receiver");
        public final static Property StakeCpuQuantity = new Property(3, String.class, "stakeCpuQuantity", false, "stake_cpu_quantity");
        public final static Property StakeNetQuantity = new Property(4, String.class, "stakeNetQuantity", false, "stake_net_quantity");
        public final static Property Transfer = new Property(5, String.class, "transfer", false, "transfer");
    }


    public EosDelegateTbDao(DaoConfig config) {
        super(config);
    }
    
    public EosDelegateTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"eos_delegate\" (" + //
                "\"tx_id\" TEXT," + // 0: txId
                "\"from\" TEXT," + // 1: from
                "\"receiver\" TEXT," + // 2: receiver
                "\"stake_cpu_quantity\" TEXT," + // 3: stakeCpuQuantity
                "\"stake_net_quantity\" TEXT," + // 4: stakeNetQuantity
                "\"transfer\" TEXT);"); // 5: transfer
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_eos_delegate_tx_id_DESC ON \"eos_delegate\"" +
                " (\"tx_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"eos_delegate\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EosDelegateTb entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(3, receiver);
        }
 
        String stakeCpuQuantity = entity.getStakeCpuQuantity();
        if (stakeCpuQuantity != null) {
            stmt.bindString(4, stakeCpuQuantity);
        }
 
        String stakeNetQuantity = entity.getStakeNetQuantity();
        if (stakeNetQuantity != null) {
            stmt.bindString(5, stakeNetQuantity);
        }
 
        String transfer = entity.getTransfer();
        if (transfer != null) {
            stmt.bindString(6, transfer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EosDelegateTb entity) {
        stmt.clearBindings();
 
        String txId = entity.getTxId();
        if (txId != null) {
            stmt.bindString(1, txId);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(3, receiver);
        }
 
        String stakeCpuQuantity = entity.getStakeCpuQuantity();
        if (stakeCpuQuantity != null) {
            stmt.bindString(4, stakeCpuQuantity);
        }
 
        String stakeNetQuantity = entity.getStakeNetQuantity();
        if (stakeNetQuantity != null) {
            stmt.bindString(5, stakeNetQuantity);
        }
 
        String transfer = entity.getTransfer();
        if (transfer != null) {
            stmt.bindString(6, transfer);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EosDelegateTb readEntity(Cursor cursor, int offset) {
        EosDelegateTb entity = new EosDelegateTb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // txId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // from
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiver
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stakeCpuQuantity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stakeNetQuantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // transfer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EosDelegateTb entity, int offset) {
        entity.setTxId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiver(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStakeCpuQuantity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStakeNetQuantity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTransfer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EosDelegateTb entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EosDelegateTb entity) {
        return null;
    }

    @Override
    public boolean hasKey(EosDelegateTb entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
