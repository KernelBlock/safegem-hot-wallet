package com.bankledger.safegem.greendaodb.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bankledger.safegem.greendaodb.entity.TxOutsTb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tx_outs_tb".
*/
public class TxOutsTbDao extends AbstractDao<TxOutsTb, Long> {

    public static final String TABLENAME = "tx_outs_tb";

    /**
     * Properties of entity TxOutsTb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TxHash = new Property(1, String.class, "txHash", false, "tx_hash");
        public final static Property OutSn = new Property(2, Long.class, "outSn", false, "out_sn");
        public final static Property Coin = new Property(3, String.class, "coin", false, "coin");
        public final static Property OutScript = new Property(4, String.class, "outScript", false, "out_script");
        public final static Property OutValue = new Property(5, String.class, "outValue", false, "out_value");
        public final static Property OutStatus = new Property(6, Integer.class, "outStatus", false, "out_status");
        public final static Property MulType = new Property(7, Integer.class, "mulType", false, "mul_type");
        public final static Property OutAddress = new Property(8, String.class, "outAddress", false, "out_address");
        public final static Property UnLockHeight = new Property(9, Integer.class, "unLockHeight", false, "unlock_height");
        public final static Property Reserve = new Property(10, String.class, "reserve", false, "reserve");
        public final static Property AssetId = new Property(11, String.class, "assetId", false, "asset_id");
    }


    public TxOutsTbDao(DaoConfig config) {
        super(config);
    }
    
    public TxOutsTbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tx_outs_tb\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"tx_hash\" TEXT," + // 1: txHash
                "\"out_sn\" INTEGER," + // 2: outSn
                "\"coin\" TEXT," + // 3: coin
                "\"out_script\" TEXT," + // 4: outScript
                "\"out_value\" TEXT," + // 5: outValue
                "\"out_status\" INTEGER," + // 6: outStatus
                "\"mul_type\" INTEGER," + // 7: mulType
                "\"out_address\" TEXT," + // 8: outAddress
                "\"unlock_height\" INTEGER," + // 9: unLockHeight
                "\"reserve\" TEXT," + // 10: reserve
                "\"asset_id\" TEXT);"); // 11: assetId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_tx_outs_tb_tx_hash_DESC_out_sn_DESC ON \"tx_outs_tb\"" +
                " (\"tx_hash\" DESC,\"out_sn\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tx_outs_tb\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TxOutsTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(2, txHash);
        }
 
        Long outSn = entity.getOutSn();
        if (outSn != null) {
            stmt.bindLong(3, outSn);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(4, coin);
        }
 
        String outScript = entity.getOutScript();
        if (outScript != null) {
            stmt.bindString(5, outScript);
        }
 
        String outValue = entity.getOutValue();
        if (outValue != null) {
            stmt.bindString(6, outValue);
        }
 
        Integer outStatus = entity.getOutStatus();
        if (outStatus != null) {
            stmt.bindLong(7, outStatus);
        }
 
        Integer mulType = entity.getMulType();
        if (mulType != null) {
            stmt.bindLong(8, mulType);
        }
 
        String outAddress = entity.getOutAddress();
        if (outAddress != null) {
            stmt.bindString(9, outAddress);
        }
 
        Integer unLockHeight = entity.getUnLockHeight();
        if (unLockHeight != null) {
            stmt.bindLong(10, unLockHeight);
        }
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(11, reserve);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(12, assetId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TxOutsTb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(2, txHash);
        }
 
        Long outSn = entity.getOutSn();
        if (outSn != null) {
            stmt.bindLong(3, outSn);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(4, coin);
        }
 
        String outScript = entity.getOutScript();
        if (outScript != null) {
            stmt.bindString(5, outScript);
        }
 
        String outValue = entity.getOutValue();
        if (outValue != null) {
            stmt.bindString(6, outValue);
        }
 
        Integer outStatus = entity.getOutStatus();
        if (outStatus != null) {
            stmt.bindLong(7, outStatus);
        }
 
        Integer mulType = entity.getMulType();
        if (mulType != null) {
            stmt.bindLong(8, mulType);
        }
 
        String outAddress = entity.getOutAddress();
        if (outAddress != null) {
            stmt.bindString(9, outAddress);
        }
 
        Integer unLockHeight = entity.getUnLockHeight();
        if (unLockHeight != null) {
            stmt.bindLong(10, unLockHeight);
        }
 
        String reserve = entity.getReserve();
        if (reserve != null) {
            stmt.bindString(11, reserve);
        }
 
        String assetId = entity.getAssetId();
        if (assetId != null) {
            stmt.bindString(12, assetId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TxOutsTb readEntity(Cursor cursor, int offset) {
        TxOutsTb entity = new TxOutsTb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // txHash
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // outSn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outScript
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outValue
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // outStatus
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // mulType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // outAddress
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // unLockHeight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // reserve
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // assetId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TxOutsTb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxHash(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOutSn(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCoin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOutScript(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMulType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOutAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnLockHeight(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setReserve(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAssetId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TxOutsTb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TxOutsTb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TxOutsTb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
